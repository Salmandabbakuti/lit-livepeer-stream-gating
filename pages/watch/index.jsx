import { useEffect, useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import { useRouter } from "next/router";
import { Player } from '@livepeer/react';
import * as LitJsSdk from "@lit-protocol/lit-node-client";
import { toast } from 'react-toastify';
import { PulseLoader } from 'react-spinners';
import styles from '../../styles/Home.module.css';
import waterfallsPoster from '../../public/images/waterfall.jpg';

const accessControlConditions = [
  {
    contractAddress: "0xB56946D84E4Dd277A8E575D5Dae551638010C6A8",
    standardContractType: "ERC721",
    chain: "mumbai",
    method: "balanceOf",
    parameters: [":userAddress"],
    returnValueTest: {
      comparator: ">",
      value: "0"
    }
  }
];

export default function WatchStream() {
  const [loading, setLoading] = useState(false);
  const [inputPlaybackId, setInputPlaybackId] = useState("");
  const [jwt, setJwt] = useState('');

  const router = useRouter();
  const { id: playbackId } = router.query;

  const resourceId = {
    baseUrl: "http://localhost:3000",
    path: "/watch-stream",
    orgId: "livepeer-org",
    role: "developer"
  };

  const authorizeStream = async (playbackId) => {
    try {
      setJwt('');
      setLoading(true);
      toast.info("Checking authorization...");
      const authSig = await LitJsSdk.checkAndSignAuthMessage({ chain: "mumbai" });
      const response = await fetch("/api/auth", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          accessControlConditions,
          authSig,
          chain: "mumbai",
          resourceId: {
            ...resourceId,
            extraData: playbackId
          },
          playbackId
        }),
      });
      const data = await response.json();
      // check if response is successful
      if (!response.ok || data?.error) {
        console.log("api err", data);
        setLoading(false);
        if (data?.error?.errorCode === 'not_authorized') return toast.error('You are not authorized to view stream. Make sure you have the NFT. if not, go to the marketplace and mint one.');
        if (data?.error?.errorCode === 'resource_id_not_found') {
          setJwt("no_token");
          return toast.info('Resource not found with Lit. Playing stream normally.');
        }
        return toast.error(data.message || "Something went wrong!");
      }
      setJwt(data.token);
      console.log("token: ", data.token);
      setLoading(false);
      toast.info('Authorization successful!');
    } catch (err) {
      setLoading(false);
      console.log("error: ", err);
      toast.error(err.message || "Something went wrong!");
    };
  };

  useEffect(() => {
    if (playbackId) {
      setInputPlaybackId(playbackId);
      authorizeStream(playbackId);
    }
  }, [playbackId]);


  return (
    <div className={styles.container}>
      <Head>
        <title>Lit x Livepeer | Watch</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.pageContainer}>
        <h2>Watch Stream</h2>
        <b>Notice:</b> You are required to have a{" "}
        <a
          target="_blank"
          rel="noreferrer"
          href="https://mumbai.polygonscan.com/address/0xB56946D84E4Dd277A8E575D5Dae551638010C6A8"
        >
          Color Token NFT(CLRT) {" "}
        </a>
        If stream owner created stream through this app. If you dont have NFT, Please mint one{" "}
        <a
          target="_blank"
          rel="noreferrer"
          href="http://color-marketplace.vercel.app/"
        >
          here
        </a>

        <label className={styles.label} htmlFor="playbackId">Playback ID</label>
        <input
          className={styles.input}
          name="playbackId"
          type="text"
          placeholder='Enter playbackId or ipfs hash and press enter'
          value={inputPlaybackId}
          onKeyUp={(e) => {
            // if enter key is pressed
            if (e.key === 'Enter') {
              console.log("enter key pressed");
              authorizeStream(inputPlaybackId);
              // just append playbackId to url
              router.push({
                pathname: '/watch',
                query: { id: inputPlaybackId },

              }, undefined, { shallow: true });
            }
          }}
          onChange={(e) => setInputPlaybackId(e.target.value)}
        />
        {inputPlaybackId && jwt && (
          <Player
            title={playbackId}
            playbackId={playbackId}
            src={(playbackId.startsWith("Qm") || playbackId.startsWith("baf")) ? `https://ipfs.io/ipfs/${playbackId}` : `https://lp-playback.com/hls/${playbackId}/index.m3u8`}
            loop
            autoPlay
            muted
            showLoadingSpinner
            controls={{
              hotkeys: true,
              autoHide: 3500
            }}
            showPipButton
            jwt={jwt}
          />
        )}
        <PulseLoader loading={loading} color='#0070f3' speedMultiplier={1} />
      </div>
    </div>
  );
}